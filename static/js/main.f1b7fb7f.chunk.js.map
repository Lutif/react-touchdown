{"version":3,"sources":["components/Wrapper.tsx","components/InputField.tsx","components/PrivateRoute.tsx","utils/formValidations/resgisterValidationSchema.ts","utils/formValidations/loginValidation.ts","utils/api/api.ts","store/auth/types.ts","store/auth/actions.ts","store/auth/reducer.ts","store/store.ts","pages/Login.tsx","utils/api/useLoginHook.ts","pages/Register.tsx","utils/api/useRegisterHook.ts","pages/Landing.tsx","pages/Home.tsx","utils/api/useLogoutHook.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Wrapper","children","variant","textAlign","backgroundColor","fontSize","minH","p","mx","maxW","w","alignItems","alignSelf","borderRadius","InputField","size","Icon","props","useField","field","error","mb","minHeight","isInvalid","pointerEvents","color","id","name","placeholder","maxWidth","noOfLines","PrivateRoute","Component","component","rest","authenticated","useSelector","state","auth","isLoggedIn","render","to","registerValidationSchema","Yup","shape","firstName","required","label","lastName","companyName","email","password","min","passwordRepeat","test","value","this","parent","loginValidationSchema","api","axios","create","baseURL","withCredentials","AUTH_SUCCESS","LOGOUT","performLogin","user","payload","type","performLogout","initialState","reducers","combineReducers","action","store","createStore","Login","dispatch","useDispatch","useState","success","loading","status","res","setRes","login","useCallback","a","post","response","data","useLoginHook","history","useHistory","useEffect","push","initialValues","username","onSubmit","values","validationSchema","validateOnChange","validateOnBlur","handleSubmit","isSubmitting","as","AiOutlineMail","RiLockPasswordFill","textColor","loadingText","isLoading","minWidth","mt","onClick","Register","register","useRegisterHook","AiOutlineUser","ImOffice","Landing","Home","logout","delete","useLogoutHook","console","log","fullName","App","basename","process","theme","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f1b7fb7f.chunk.js","sourcesContent":["import { Box, Grid } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ninterface wrapperProps {\n  variant?: \"small\" | \"regular\";\n}\n\nexport const Wrapper: React.FC<wrapperProps> = ({\n  children,\n  variant = \"regular\",\n}) => {\n  return (\n    <Box textAlign=\"center\" backgroundColor=\"grey\" fontSize=\"xl\">\n      <Grid minH=\"100vh\" p={3}>\n        <Box\n          mx=\"auto\"\n          maxW={variant === \"regular\" ? \"800px\" : \"400px\"}\n          w=\"100%\"\n          alignItems=\"center\"\n          alignSelf=\"center\"\n          p={variant === \"regular\" ? \"145px\" : \"50px\"}\n          backgroundColor=\"white\"\n          borderRadius={15}\n        >\n          {children}\n        </Box>\n      </Grid>\n    </Box>\n  );\n};\n","import {\n  FormControl,\n  Input,\n  FormErrorMessage,\n  InputLeftElement,\n  InputGroup,\n  ComponentWithAs,\n  IconProps,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useField } from \"formik\";\n\ntype InputFieldProps = React.InputHTMLAttributes<HTMLInputElement> & {\n  name: string;\n  Icon: ComponentWithAs<\"svg\", IconProps>;\n};\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  size: _,\n  Icon,\n  ...props\n}) => {\n  const [field, { error }] = useField(props);\n\n  return (\n    <FormControl mb={2} minHeight=\"67px\" isInvalid={!!error}>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents=\"none\"\n          children={<Icon color=\"gray.300\" />}\n        />\n        <Input\n          {...field}\n          {...props}\n          id={field.name}\n          placeholder={props.placeholder || field.name}\n          maxWidth={550}\n          variant=\"filled\"\n        />\n      </InputGroup>\n      <FormErrorMessage noOfLines={1}>{error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { AppStateType } from \"../types\";\n\nexport const PrivateRoute = ({ component: Component, ...rest }: any) => {\n  const auth = useSelector((state: AppStateType) => state.auth);\n  const authenticated = auth.isLoggedIn;\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        authenticated ? <Component {...props} /> : <Redirect to=\"/\" />\n      }\n    />\n  );\n};\n","import * as Yup from \"yup\";\n\nexport const registerValidationSchema = Yup.object().shape({\n  firstName: Yup.string().required(\"Enter your name.\").label(\"First Name\"),\n  lastName: Yup.string().required(\"Enter your last name.\").label(\"Last Name\"),\n  companyName: Yup.string()\n    .required(\"Enter your company name.\")\n    .label(\"Last Name\"),\n  email: Yup.string().email().required(\"Email is required.\").label(\"Email\"),\n  password: Yup.string()\n    .required(\"Enter your password\")\n    .min(8)\n    .label(\"Password\"),\n  passwordRepeat: Yup.string()\n    .required(\"Enter your password again\")\n    .min(8)\n    .label(\"Password\")\n    .test(\"password-match\", \"Confirm password must match\", function (value) {\n      return this.parent.password === value;\n    }),\n});\n","import * as Yup from \"yup\";\n\nexport const loginValidationSchema = Yup.object().shape({\n  email: Yup.string().email().required(\"Email is required.\").label(\"Email\"),\n  password: Yup.string()\n    .required(\"Enter your password\")\n    .min(8)\n    .label(\"Password\"),\n});\n","import axios from \"axios\";\n\nexport const api = axios.create({\n  baseURL: \"https://api.designgrid.co/api\",\n  withCredentials: true,\n});\n","export const AUTH_SUCCESS = \"AUTH_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\n","import { UserType } from \"../../types/UserType\";\nimport { AUTH_SUCCESS, LOGOUT } from \"./types\";\n\nexport const performLogin = (user: UserType) => {\n  return {\n    payload: user,\n    type: AUTH_SUCCESS,\n  };\n};\nexport const performLogout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n","import { AuthStateType } from \"../../types/\";\nimport { AUTH_SUCCESS, LOGOUT } from \"./types\";\n\nconst initialState: AuthStateType = {\n  user: null,\n  isLoggedIn: false,\n};\n\ntype ActionType = {\n  payload: unknown;\n  type: \"AUTH_SUCCESS\" | \"LOGOUT\";\n};\nexport const auth = (state = initialState, action: ActionType) => {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      return {\n        ...state,\n        user: action.payload,\n        isLoggedIn: true,\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isLoggedIn: false,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n","import { createStore, combineReducers } from \"redux\";\nimport { auth } from \"./auth\";\n\nconst reducers = combineReducers({ auth });\nexport const store = createStore(reducers);\n","import { Button, Heading, Icon, Text } from \"@chakra-ui/react\";\nimport { Formik } from \"formik\";\nimport React, { useEffect } from \"react\";\n\nimport { InputField, Wrapper } from \"../components\";\nimport { loginValidationSchema } from \"../utils/formValidations\";\nimport { useLoginHook } from \"../utils/api\";\nimport { useSelector } from \"react-redux\";\nimport { AppStateType } from \"../types\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { AiOutlineMail } from \"react-icons/ai\";\nimport { RiLockPasswordFill } from \"react-icons/ri\";\n\ninterface LoginProps {}\n\nexport const Login: React.FC<LoginProps> = () => {\n  const { res, login } = useLoginHook();\n  const history = useHistory();\n\n  const auth = useSelector((state: AppStateType) => state.auth);\n  useEffect(() => {\n    if (auth.isLoggedIn) {\n      history.push(\"/home\");\n    }\n  }, [auth.isLoggedIn]);\n\n  return (\n    <Wrapper variant=\"regular\">\n      {res.status === 401 && (\n        <Text mb={10} color=\"red\">\n          Wrong credential\n        </Text>\n      )}\n      <Formik\n        initialValues={{ username: \"\", password: \"\" }}\n        onSubmit={async (values) => login(values)}\n        validationSchema={loginValidationSchema}\n        validateOnChange={false}\n        validateOnBlur={false}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <form>\n            <Heading mb={10}>Login</Heading>\n            <InputField\n              name=\"email\"\n              placeholder=\"Email address\"\n              Icon={() => <Icon color=\"gray.400\" as={AiOutlineMail} />}\n            />\n            <InputField\n              type=\"password\"\n              name=\"password\"\n              Icon={() => <Icon color=\"gray.400\" as={RiLockPasswordFill} />}\n            />\n            <Button\n              backgroundColor=\"#22272c\"\n              textColor=\"white\"\n              variant=\"solid\"\n              loadingText=\"Please wait...\"\n              isLoading={isSubmitting}\n              minWidth=\"300px\"\n              mt={\"30\"}\n              size=\"lg\"\n              onClick={() => handleSubmit()}\n            >\n              Login\n            </Button>\n          </form>\n        )}\n      </Formik>\n      <Link to=\"/register\">\n        <Text mt={4} fontSize=\"14px\">\n          Don't have an account? Sign Up\n        </Text>\n      </Link>\n    </Wrapper>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { api } from \"./api\";\nimport { Response } from \"../../types/response\";\nimport { performLogin, performLogout } from \"../../store\";\nimport { useDispatch } from \"react-redux\";\n\nexport const useLoginHook = () => {\n  const dispatch = useDispatch();\n\n  const [res, setRes] = useState<Response>({\n    success: false,\n    loading: true,\n    status: null,\n  });\n\n  const login = useCallback(async (payload) => {\n    setRes({ success: false, loading: true, status: null });\n    try {\n      const response = await api.post(\"/auth/login\", payload);\n      dispatch(performLogin(response.data));\n      setRes({ success: true, loading: false, status: 200 });\n    } catch (error) {\n      setRes({\n        success: false,\n        loading: false,\n        status: error.response.status,\n      });\n      dispatch(performLogout());\n    }\n  }, []);\n\n  return { res, login };\n};\n","import { Button, HStack, Heading, Text } from \"@chakra-ui/react\";\nimport { Formik } from \"formik\";\nimport React, { useEffect } from \"react\";\nimport { Wrapper, InputField } from \"../components\";\nimport { registerValidationSchema } from \"../utils/formValidations\";\nimport { useRegisterHook } from \"../utils/api/useRegisterHook\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Icon } from \"@chakra-ui/react\";\nimport { AiOutlineUser, AiOutlineMail } from \"react-icons/ai\";\nimport { ImOffice } from \"react-icons/im\";\nimport { RiLockPasswordFill } from \"react-icons/ri\";\n\ninterface RegisterProps {}\n\nexport const Register: React.FC<RegisterProps> = () => {\n  const { res, register } = useRegisterHook();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (res.success) {\n      history.push(\"/login\");\n    }\n  }, [res]);\n\n  return (\n    <Wrapper variant=\"regular\">\n      {res.status === 409 && (\n        <Text mb={10} color=\"red\">\n          Account already exists for this email,\n          <Link to=\"/login\"> Please login.</Link>\n        </Text>\n      )}\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          companyName: \"\",\n          email: \"\",\n          password: \"\",\n          passwordRepeat: \"\",\n        }}\n        onSubmit={async (values) => {\n          register(values);\n        }}\n        validationSchema={registerValidationSchema}\n        validateOnChange={false}\n        validateOnBlur={false}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <form>\n            <Heading mb={10}>Sign Up</Heading>\n            <HStack>\n              <InputField\n                name=\"firstName\"\n                placeholder=\"First Name\"\n                Icon={() => <Icon color=\"gray.400\" as={AiOutlineUser} />}\n              />\n              <InputField\n                name=\"lastName\"\n                placeholder=\"Last Name\"\n                Icon={() => <Icon color=\"gray.400\" as={AiOutlineUser} />}\n              />\n            </HStack>\n            <InputField\n              name=\"companyName\"\n              placeholder=\"Company Name\"\n              Icon={() => <Icon color=\"gray.400\" as={ImOffice} />}\n            />\n            <InputField\n              name=\"email\"\n              placeholder=\"Email address\"\n              Icon={() => <Icon color=\"gray.400\" as={AiOutlineMail} />}\n            />\n            <HStack>\n              <InputField\n                name=\"password\"\n                placeholder=\"Password\"\n                type=\"password\"\n                Icon={() => <Icon color=\"gray.400\" as={RiLockPasswordFill} />}\n              />\n              <InputField\n                name=\"passwordRepeat\"\n                placeholder=\"Repeat Password\"\n                type=\"password\"\n                Icon={() => <Icon color=\"gray.400\" as={RiLockPasswordFill} />}\n              />\n            </HStack>\n            <Button\n              backgroundColor=\"#22272c\"\n              textColor=\"white\"\n              variant=\"solid\"\n              loadingText=\"Register...\"\n              isLoading={isSubmitting}\n              minWidth=\"300px\"\n              mt={\"30\"}\n              size=\"lg\"\n              onClick={() => handleSubmit()}\n            >\n              Register\n            </Button>\n          </form>\n        )}\n      </Formik>\n      <Link to=\"/login\">\n        <Text mt={4} fontSize=\"14px\">\n          Already Registered? login\n        </Text>\n      </Link>\n    </Wrapper>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { api } from \"./api\";\nimport { Response } from \"../../types/response\";\n\nexport const useRegisterHook = () => {\n  const [res, setRes] = useState<Response>({\n    success: false,\n    loading: true,\n    status: null,\n  });\n  const register = useCallback(async (payload) => {\n    setRes({ success: false, loading: true, status: null });\n    try {\n      const response = await api.post(\"/auth/register\", payload);\n      if (response.status === 200) {\n        //redux login\n      }\n      setRes({ success: true, loading: false, status: 200 });\n    } catch (error) {\n      setRes({ success: false, loading: false, status: error.response.status });\n    }\n  }, []);\n\n  return { res, register };\n};\n","import { Box, Heading, VStack, Button, HStack } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\n\ninterface LandingProps {}\n\nexport const Landing: React.FC<LandingProps> = () => {\n  const history = useHistory();\n\n  return (\n    <Box backgroundColor=\"white\">\n      <VStack>\n        <Heading>Welcome to TouchDown</Heading>\n        <HStack mt={30}>\n          <Button\n            backgroundColor=\"#22272c\"\n            textColor=\"white\"\n            variant=\"solid\"\n            loadingText=\"Register...\"\n            minWidth=\"300px\"\n            size=\"lg\"\n            onClick={() => history.push(\"/register\")}\n          >\n            Register\n          </Button>\n          <Button\n            backgroundColor=\"#22272c\"\n            textColor=\"white\"\n            variant=\"solid\"\n            loadingText=\"Register...\"\n            minWidth=\"300px\"\n            size=\"lg\"\n            onClick={() => history.push(\"/login\")}\n          >\n            Login\n          </Button>\n        </HStack>\n      </VStack>\n    </Box>\n  );\n};\n","import { Box, Heading, VStack, Text, Button } from \"@chakra-ui/react\";\nimport React, { useEffect } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { AppStateType } from \"../types\";\nimport { useLogoutHook } from \"../utils/api/useLogoutHook\";\n\ninterface HomeProps {}\n\nexport const Home: React.FC<HomeProps> = () => {\n  const { logout } = useLogoutHook();\n\n  const auth = useSelector((state: AppStateType) => state.auth);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!auth.isLoggedIn) {\n      history.push(\"/\");\n    }\n  }, [auth.isLoggedIn]);\n  console.log(\"hello\", auth?.user);\n\n  return (\n    <Box backgroundColor=\"white\">\n      <VStack>\n        <Heading>Welcome to TouchDown {auth.user?.fullName}</Heading>\n        <Text>Still working on homepage thank you for registering</Text>\n        <Text>Bored? </Text>\n        <Button\n          backgroundColor=\"#22272c\"\n          textColor=\"white\"\n          variant=\"solid\"\n          loadingText=\"Register...\"\n          minWidth=\"300px\"\n          mt={\"30\"}\n          size=\"lg\"\n          onClick={() => logout()}\n        >\n          Logout\n        </Button>\n      </VStack>\n    </Box>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { api } from \"./api\";\nimport { Response } from \"../../types/response\";\nimport { performLogout } from \"../../store\";\nimport { useDispatch } from \"react-redux\";\n\nexport const useLogoutHook = () => {\n  const dispatch = useDispatch();\n\n  const [res, setRes] = useState<Response>({\n    success: false,\n    loading: true,\n    status: null,\n  });\n\n  const logout = useCallback(async () => {\n    setRes({ success: false, loading: true, status: null });\n    try {\n      const response = await api.delete(\"/auth/logout\");\n      dispatch(performLogout());\n      setRes({ success: true, loading: false, status: 200 });\n    } catch (error) {\n      dispatch(performLogout());\n      setRes({\n        success: false,\n        loading: false,\n        status: error.response.status,\n      });\n    }\n  }, []);\n\n  return { res, logout };\n};\n","import * as React from \"react\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport { Provider } from \"react-redux\";\n\nimport { Login, Register, Landing, Home } from \"./pages\";\nimport { PrivateRoute } from \"./components\";\nimport { store } from \"./store\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport const App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Provider store={store}>\n        <ChakraProvider theme={theme}>\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n          <Route exact path=\"/\">\n            <Landing />\n          </Route>\n          <Route exact path=\"/register\">\n            <Register />\n          </Route>\n          <PrivateRoute exact path=\"/home\">\n            <Home />\n          </PrivateRoute>\n        </ChakraProvider>\n      </Provider>\n    </Switch>\n  </Router>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}